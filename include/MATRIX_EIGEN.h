/***************************************************************** 
 *
 * 行列の固有値分解
 *
 *
 *                           Created  by Mamoru Ota (2018/03/09)
 * 
 *****************************************************************/

#ifndef _MATRIX_EIGEN_H_INCLUDE_
#define _MATRIX_EIGEN_H_INCLUDE_

#ifdef __cplusplus
extern "C" {
#endif

  // *******************************************************************
  // 実2重対角行列
  //            | B0[0]  B1[0]     0      0  ...         0          0  |
  //            |    0   B0[1]  B1[1]     0  ...         .          .  |
  //            |    0      0   B0[2]  B1[2] ...         .          .  |
  // B        = |    0      0      0   B0[3] ...         .          .  |
  //            |    .      .      .      .              0          0  |
  //            |    0      0      0      0       B1[n - 3]         0  |
  //            |    0      0      0      0  ...  B0[n - 2]  B1[n - 2] | 
  //            |    0      0      0      0  ...         0   B0[n - 1] |
  // について, 3重対角行列
  //            | T0[0]  T1[0]     0      0  ...         0          0  |
  //            | T1[0]  T0[1]  T1[1]     0  ...         .          .  |
  //            |    0   T1[1]  T0[2]  T1[2] ...         .          .  |
  // B^{T}B   = |    0      0   T1[2]  T0[3] ...         .          .  |
  //            |    .      .      .      .              0          0  |
  //            |    0      0      0      0  ...  T1[n - 3]         0  | 
  //            |    0      0      0      0  ...  T0[n - 2]  T1[n - 2] | 
  //            |    0      0      0      0  ...  T1[n - 2]  T0[n - 1] |
  // のT0, T1を計算する. 
  // *******************************************************************
  void REAL__MATRIX_BTB(REAL T0[],//(out)[n]     : 3重対角行列の対角成分
                        REAL T1[],//(out)[n - 1] : 3重対角行列の非対角成分
                        REAL B0[],//(in) [n]     : 2重対角行列の対角成分
                        REAL B1[],//(in) [n - 1] : 2重対角行列の非対角成分
                        INT  n);  //(in)         : 2重対角行列の次元数

  // *******************************************************************
  // 実2重対角行列
  //            | B0[0]  B1[0]     0      0  ...         0          0  |
  //            |    0   B0[1]  B1[1]     0  ...         .          .  |
  //            |    0      0   B0[2]  B1[2] ...         .          .  |
  // B        = |    0      0      0   B0[3] ...         .          .  |
  //            |    .      .      .      .              0          0  |
  //            |    0      0      0      0       B1[n - 3]         0  |
  //            |    0      0      0      0  ...  B0[n - 2]  B1[n - 2] | 
  //            |    0      0      0      0  ...         0   B0[n - 1] |
  // について, 3重対角行列
  //            | T0[0]  T1[0]     0      0  ...         0          0  |
  //            | T1[0]  T0[1]  T1[1]     0  ...         .          .  |
  //            |    0   T1[1]  T0[2]  T1[2] ...         .          .  |
  // BB^{T}   = |    0      0   T1[2]  T0[3] ...         .          .  |
  //            |    .      .      .      .              0          0  |
  //            |    0      0      0      0  ...  T1[n - 3]         0  | 
  //            |    0      0      0      0  ...  T0[n - 2]  T1[n - 2] | 
  //            |    0      0      0      0  ...  T1[n - 2]  T0[n - 1] |
  // のT0, T1を計算する. 
  // *******************************************************************
  void REAL__MATRIX_BBT(REAL T0[],//(out)[n]     : 3重対角行列の対角成分
                        REAL T1[],//(out)[n - 1] : 3重対角行列の非対角成分
                        REAL B0[],//(in) [n]     : 2重対角行列の対角成分
                        REAL B1[],//(in) [n - 1] : 2重対角行列の非対角成分
                        INT  n);  //(in)         : 2重対角行列の次元数

  // *******************************************************************
  // 実対称3重対角行列
  //
  //            | T0[0]  T1[0]     0      0  ...         0          0  |
  //            | T1[0]  T0[1]  T1[1]     0  ...         .          .  |
  //            |    0   T1[1]  T0[2]  T1[2] ...         .          .  |
  // T        = |    0      0   T1[2]  T0[3] ...         .          .  |
  //            |    .      .      .      .              0          0  |
  //            |    0      0      0      0  ...  T1[n - 3]         0  | 
  //            |    0      0      0      0  ...  T0[n - 2]  T1[n - 2] | 
  //            |    0      0      0      0  ...  T1[n - 2]  T0[n - 1] |
  //
  // のQR分解(T = QR)を行う. 上三角行列Rは, 
  //
  //            | R0[0]  R1[0]  R2[0]     0  ...         0          0  |
  //            |    0   R0[1]  R1[1]  R2[1] ...         .          .  |
  //            |    0      0   R0[2]  R1[2] ...         .          .  |
  // R        = |    0      0      0   R0[3] ...         .          .  |
  //            |    .      .      .      .       R2[n - 4]         0  |
  //            |    0      0      0      0  ...  R1[n - 3]  R2[n - 3] | 
  //            |    0      0      0      0  ...  R0[n - 2]  R1[n - 2] | 
  //            |    0      0      0      0  ...         0   R0[n - 1] |
  //  
  // となっており, 直交行列Qは,
  //
  // Q        = P[0]^{T}P[1]^{T}P[2]^{T}...P[n - 2]^{T}
  //
  // で与えられる. 
  // ここで, 
  //
  //            |  C[0]   S[0]     0      0  ...         0          0  |
  //            | -S[0]   C[0]     0      0  ...         .          .  |
  //            |    0      0      1      0  ...         .          .  |
  // P[0]     = |    0      0      0      1  ...         .          .  |
  //            |    .      .      .      .              0          0  |
  //            |    0      0      0      0  ...         0          0  | 
  //            |    0      0      0      0  ...         1          0  | 
  //            |    0      0      0      0  ...         0          1  |
  //
  //            |    1      0      0      0  ...         0          0  |
  //            |         C[1]   S[1]     0  ...         .          .  |
  //            |    0   -S[1]   C[1]     0  ...         .          .  |
  // P[1]     = |    0      0      0      1  ...         .          .  |
  //            |    .      .      .      .              0          0  |
  //            |    0      0      0      0  ...         0          0  | 
  //            |    0      0      0      0  ...         1          0  | 
  //            |    0      0      0      0  ...         0          1  |
  // ...
  //
  //            |    1      0      0      0  ...         0          0  |
  //            |           1      0      0  ...         .          .  |
  //            |    0      0      1      0  ...         .          .  |
  // P[n - 2] = |    0      0      0      1  ...         .          .  |
  //            |    .      .      .      .              0          0  |
  //            |    0      0      0      0  ...         0          0  | 
  //            |    0      0      0      0  ...   C[n - 2]   S[n - 2] | 
  //            |    0      0      0      0  ...  -S[n - 2]   C[n - 2] |
  //
  // である. 
  // 
  // *******************************************************************
  void REAL__MATRIX_QR_TRI(REAL C [],//(out)[n - 1] : 直交行列の情報を表すパラメータ
                           REAL S [],//(out)[n - 1] : 直交行列の情報を表すパラメータ
                           REAL R0[],//(out)[n]     : 上三角行列の対角成分
                           REAL R1[],//(out)[n - 1] : 上三角行列の非対角成分1
                           REAL R2[],//(out)[n - 2] : 上三角行列の非対角成分2 (R2の計算が不要な場合はNULLを入れる)
                           REAL T0[],//(in) [n]     : 3重対角行列の対角成分
                           REAL T1[],//(in) [n - 1] : 3重対角行列の非対角成分
                           INT  n);  //(in)         : 3重対角行列の次元数

  // *******************************************************************
  // 実対称3重対角行列
  //
  //            | T0[0]  T1[0]     0      0  ...         0          0  |
  //            | T1[0]  T0[1]  T1[1]     0  ...         .          .  |
  //            |    0   T1[1]  T0[2]  T1[2] ...         .          .  |
  // T        = |    0      0   T1[2]  T0[3] ...         .          .  |
  //            |    .      .      .      .              0          0  |
  //            |    0      0      0      0  ...  T1[n - 3]         0  | 
  //            |    0      0      0      0  ...  T0[n - 2]  T1[n - 2] | 
  //            |    0      0      0      0  ...  T1[n - 2]  T0[n - 1] |
  //
  // のQR分解(T = QR)により得られるRとQ(REAL__MATRIX_QR_TRIにより計算可能)からRQを計算する. 
  // すなわち
  //            | U0[0]  U1[0]     0      0  ...         0          0  |
  //            | U1[0]  U0[1]  U1[1]     0  ...         .          .  |
  //            |    0   U1[1]  U0[2]  U1[2] ...         .          .  |
  // RQ       = |    0      0   U1[2]  U0[3] ...         .          .  |
  //            |    .      .      .      .              0          0  |
  //            |    0      0      0      0  ...  U1[n - 3]         0  | 
  //            |    0      0      0      0  ...  U0[n - 2]  U1[n - 2] | 
  //            |    0      0      0      0  ...  U1[n - 2]  U0[n - 1] |
  // を返す. 
  // *******************************************************************
  void REAL__MATRIX_RQ_TRI(REAL U0[],//(out)[n]     : 3重対角行列RQの対角成分
                           REAL U1[],//(out)[n - 1] : 3重対角行列RQの非対角成分
                           REAL C [],//(in) [n - 1] : QR分解の直交行列Qの情報を表すパラメータ
                           REAL S [],//(in) [n - 1] : QR分解の直交行列Qの情報を表すパラメータ
                           REAL R0[],//(in) [n]     : QR分解の上三角行列Rの対角成分
                           REAL R1[],//(in) [n - 1] : QR分解の上三角行列Rの非対角成分1
                           INT  n);  //(in)         : 行列の次元数

  // *******************************************************************
  // 2次実対称行列
  //
  // A = | a0 a1 |
  //     | a1 a2 | 
  // の二つの固有値emax,emin(emax > emin)を返す.  
  // *******************************************************************
  void REAL__MATRIX_EIGENVALUES_2D(REAL *emax,
                                   REAL *emin,
                                   REAL  a0,
                                   REAL  a1,
                                   REAL  a2);

  // *******************************************************************
  // 実対称3重対角行列
  //
  //            | T0[0]  T1[0]     0      0  ...         0          0  |
  //            | T1[0]  T0[1]  T1[1]     0  ...         .          .  |
  //            |    0   T1[1]  T0[2]  T1[2] ...         .          .  |
  // T        = |    0      0   T1[2]  T0[3] ...         .          .  |
  //            |    .      .      .      .              0          0  |
  //            |    0      0      0      0  ...  T1[n - 3]         0  | 
  //            |    0      0      0      0  ...  T0[n - 2]  T1[n - 2] | 
  //            |    0      0      0      0  ...  T1[n - 2]  T0[n - 1] |
  //
  // の固有値分解T = U diag(L) U^{T}を減次付WilkinsonシフトQR法により計算する.
  // ここで, Uは直交行列を表し,
  // LはTの固有値からなるベクトルである. 
  // また,
  //            |  L[0]     0      0      0  ...         0          0  |
  //            |    0    L[1]     0      0  ...         .          .  |
  //            |    0      0    L[2]     0  ...         .          .  |
  // diag(L)  = |    0      0      0      0  ...         .          .  |
  //            |    .      .      .      .              0          0  |
  //            |    0      0      0      0  ...         0          0  | 
  //            |    0      0      0      0  ...   L[n - 2]         0  | 
  //            |    0      0      0      0  ...         0    L[n - 1] |
  // である.
  // 
  // 返される固有値は|L[0]| > |L[1]| > |L[2]| > ...の順に並ぶ(QR法の性質).
  // また, L[k]に対応する固有ベクトルv[k]は,
  //
  //            | U[     0  * n + k] |
  //            | U[     1  * n + k] |
  //            | U[     2  * n + k] |
  // v[k]     = | U[     3  * n + k] |
  //            |           .        |
  //            | U[(n - 2) * n + k] |
  //            | U[(n - 1) * n + k] |
  //
  // であり, 大きさは1で規格化されており, 固有ベクトルは互いに直交している.
  // 
  // *******************************************************************
  void REAL__MATRIX_EIGENVALUE_DECOMPOSITION_TRI(REAL U [],//(out)[n * n] : 直交行列
                                                 REAL T0[],//(io) [n]     : 実対称3重対角行列の対角成分   (対角化した結果のLの  対角成分が返される. 固有値配列)
                                                 REAL T1[],//(io) [n - 1] : 実対称3重対角行列の非対角成分 (対角化した結果のLの非対角成分が返される. 数値誤差がなければ全て0)
                                                 INT  n);  //(in)         : 行列の次元数

#ifdef __cplusplus
}
#endif
  
#endif

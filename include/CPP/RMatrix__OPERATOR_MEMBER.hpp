// *************************************************
// 加算演算子(行列)
// *************************************************
RMatrix  &RMatrix::operator +=(const RMatrix &A){
  return *this = *this + A;
}

// *************************************************
// 加算演算子(実数)
// *************************************************
RMatrix  &RMatrix::operator +=(const REAL     k){
  return *this = *this + k;
}

// *************************************************
// 減算演算子(行列)
// *************************************************
RMatrix  &RMatrix::operator -=(const RMatrix &A){
  return *this = *this - A;
}

// *************************************************
// 減算演算子(実数)
// *************************************************
RMatrix  &RMatrix::operator -=(const REAL     k){
  return *this = *this - k;
}

// *************************************************
// 乗算演算子(行列)
// *************************************************
RMatrix  &RMatrix::operator *=(const RMatrix &A){
  return *this = *this * A;
}

// *************************************************
// 乗算演算子(実数)
// *************************************************
RMatrix  &RMatrix::operator *=(const REAL     b){
  return *this = *this * b;
}

// *************************************************
// 乗算演算子(行列) (成分同士の乗算)
// *************************************************
RMatrix  &RMatrix::operator %=(const RMatrix &A){
  return *this = *this % A;
}

// *************************************************
// 除算演算子(実数)
// *************************************************
RMatrix  &RMatrix::operator /=(const REAL     b){
  return *this = *this / b;
}

// *************************************************
// 除算演算子(行列) (成分同士の除算)
// *************************************************
RMatrix  &RMatrix::operator /=(const RMatrix &A){
  return *this = *this / A;
}

// *************************************************
// 出力
// *************************************************
ostream &operator <<(ostream     &os,const RMatrix &A){
  CHAR str[256];
  INT  i,j;

  os << "=============(" << A.row << "," << A.col << ")=============" << endl;  
  for(i = 0;i < A.row;i++){
    os << "| "; 
    for(j = 0;j < A.col;j++){
      sprintf(str,(A.dat[i * A.col + j] >= 0.0) ? "+%10.5lf " : "-%10.5lf ",fabs(A.dat[i * A.col + j]));
      os << str;
    }
    os << "|" << endl;
  }
  
  return os;
}
